import React, { useState } from "react";

/**
 * Strong random integer generator using Web Crypto API.
 * Returns integer in [0, max)
 */
function secureRandomInt(max) {
  if (window.crypto && window.crypto.getRandomValues) {
    // create a 32-bit unsigned integer
    const array = new Uint32Array(1);
    window.crypto.getRandomValues(array);
    // use modulo bias mitigation by rejecting values >= floor(2^32 / max) * max
    const range = max;
    const maxRange = 0xFFFFFFFF + 1; // 2^32
    const limit = Math.floor(maxRange / range) * range;
    let val = array[0];
    // if val is within allowed limit use, else regenerate
    while (val >= limit) {
      window.crypto.getRandomValues(array);
      val = array[0];
    }
    return val % range;
  } else {
    // fallback (less secure)
    return Math.floor(Math.random() * max);
  }
}

const LOWER = "abcdefghijklmnopqrstuvwxyz";
const UPPER = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
const DIGITS = "0123456789";
const SYMBOLS = "!@#$%^&*()-_=+[]{};:,.<>?/|`~";

export default function PasswordGenerator() {
  const [length, setLength] = useState(16);
  const [useLower, setUseLower] = useState(true);
  const [useUpper, setUseUpper] = useState(true);
  const [useNumbers, setUseNumbers] = useState(true);
  const [useSymbols, setUseSymbols] = useState(false);
  const [password, setPassword] = useState("");
  const [copied, setCopied] = useState(false);

  function buildCharset() {
    let chars = "";
    if (useLower) chars += LOWER;
    if (useUpper) chars += UPPER;
    if (useNumbers) chars += DIGITS;
    if (useSymbols) chars += SYMBOLS;
    return chars;
  }

  function generatePassword() {
    const charset = buildCharset();
    if (!charset) {
      setPassword("");
      return;
    }
    let pass = "";
    for (let i = 0; i < length; i++) {
      const idx = secureRandomInt(charset.length);
      pass += charset[idx];
    }
    setPassword(pass);
    setCopied(false);
  }

  function copyToClipboard() {
    if (!password) return;
    navigator.clipboard.writeText(password)
      .then(() => {
        setCopied(true);
        // reset copied message after 1.5s
        setTimeout(() => setCopied(false), 1500);
      })
      .catch(() => {
        // fallback
        alert("Copy failed â€” try selecting and copying manually.");
      });
  }

  function entropyEstimate() {
    const charsetSize = buildCharset().length;
    if (!charsetSize || !length) return 0;
    // approximate entropy in bits: length * log2(charsetSize)
    return (length * Math.log2(charsetSize)).toFixed(1);
  }

  function strengthLabel() {
    const bits = parseFloat(entropyEstimate());
    if (!bits) return "No charset selected";
    if (bits < 40) return "Weak";
    if (bits < 80) return "Moderate";
    return "Strong";
  }

  return (
    <div style={styles.container}>
      <h2 style={{ marginBottom: 8 }}>Random Password Generator</h2>

      <div style={styles.row}>
        <label style={styles.label}>Length: {length}</label>
        <input
          type="range"
          min="4"
          max="64"
          value={length}
          onChange={(e) => setLength(Number(e.target.value))}
          style={{ flex: 1 }}
        />
      </div>

      <div style={styles.row}>
        <label style={styles.checkboxLabel}>
          <input
            type="checkbox"
            checked={useLower}
            onChange={(e) => setUseLower(e.target.checked)}
          />{" "}
          lowercase
        </label>

        <label style={styles.checkboxLabel}>
          <input
            type="checkbox"
            checked={useUpper}
            onChange={(e) => setUseUpper(e.target.checked)}
          />{" "}
          UPPERCASE
        </label>

        <label style={styles.checkboxLabel}>
          <input
            type="checkbox"
            checked={useNumbers}
            onChange={(e) => setUseNumbers(e.target.checked)}
          />{" "}
          numbers
        </label>

        <label style={styles.checkboxLabel}>
          <input
            type="checkbox"
            checked={useSymbols}
            onChange={(e) => setUseSymbols(e.target.checked)}
          />{" "}
          symbols
        </label>
      </div>

      <div style={styles.row}>
        <button onClick={generatePassword} style={styles.button}>
          Generate
        </button>

        <button
          onClick={copyToClipboard}
          style={{ ...styles.button, marginLeft: 8 }}
          disabled={!password}
        >
          {copied ? "Copied!" : "Copy"}
        </button>

        <div style={{ marginLeft: "auto", alignSelf: "center", textAlign: "right" }}>
          <div style={{ fontSize: 12, color: "#444" }}>{strengthLabel()}</div>
          <div style={{ fontSize: 12, color: "#666" }}>{entropyEstimate()} bits</div>
        </div>
      </div>

      <div style={styles.passwordBox} aria-live="polite">
        {password || <span style={{ color: "#888" }}>Your password will appear here</span>}
      </div>
    </div>
  );
}

const styles = {
  container: {
    maxWidth: 640,
    padding: 16,
    borderRadius: 8,
    boxShadow: "0 4px 14px rgba(0,0,0,0.08)",
    background: "#fff",
    fontFamily: "system-ui, -apple-system, 'Segoe UI', Roboto, 'Helvetica Neue', Arial",
  },
  row: {
    display: "flex",
    gap: 12,
    alignItems: "center",
    marginBottom: 12,
  },
  label: {
    width: 90,
    fontSize: 14,
    color: "#333",
  },
  checkboxLabel: {
    display: "flex",
    alignItems: "center",
    gap: 6,
    fontSize: 13,
    color: "#333",
  },
  button: {
    padding: "8px 12px",
    borderRadius: 6,
    border: "1px solid #ddd",
    background: "#f5f5f7",
    cursor: "pointer",
  },
  passwordBox: {
    marginTop: 12,
    padding: 12,
    borderRadius: 6,
    border: "1px solid #eee",
    background: "#fafafa",
    fontFamily: "monospace",
    fontSize: 16,
    wordBreak: "break-all",
  },
};
